<!--
 Copyright 2020 Google LLC
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

{% extends 'layout.njk' %}

{% block content %}
  <h1 elementtiming="main-heading">FCP Test</h1>
  <p>
    {% if not imgDelay %}
      {% set imgDelay = 500 %}
    {% endif %}
    <img elementtiming="main-image" {% if imgHidden %}hidden{% endif %} src="/test/img/square.png?delay={{ imgDelay }}">
  </p>
  <p>Text below the image</p>

  <p><a id="navigate-away" href="https://example.com">Navigate away</a></p>

  <script>
    (async function() {
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DCL');
      });


      const state = 'interactive';
      const logs = [];
      self.foo = document.readyState;
      logs.push(['foo', document.readyState]);

      await new Promise((resolve) => {
        logs.push(['foo:promise', document.readyState]);
        if (document.readyState === 'complete' || document.readyState === state) {
          resolve();
        } else {
          document.addEventListener('readystatechange', () => {
            console.log('readystatechange', document.readyState);
            if (
              document.readyState === state ||
              document.readyState === 'complete'
            ) {
              resolve();
            }
          });
        }
      });
      // logs.push(self.__toSafeObject(self.__readyPromises));
      // if (state !== 'loading') {
        self.foo2 = document.readyState;
        logs.push(['foo2', document.readyState]);
        await Promise.all(self.__readyPromises);
      // }
      self.foo3 = document.readyState;
      logs.push(['foo3', document.readyState]);
      // Queue a task so this resolves after any event callback run.
      setTimeout(() => console.log(logs), 0);
    })();
  </script>

  <script type="module">
    console.log('before __testImport');
    const {onFCP} = await __testImport('{{ modulePath }}');
    console.log('after __testImport');

    onFCP((fcp) => {
      // Log for easier manual testing.
      console.log(fcp);

      // Test sending the metric to an analytics endpoint.
      navigator.sendBeacon(`/collect`, JSON.stringify(__toSafeObject(fcp)));
    }, {reportAllChanges: self.__reportAllChanges});

    console.log('wc', self.wv = true);

  </script>
{% endblock %}
